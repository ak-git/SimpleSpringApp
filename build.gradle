plugins {
    id "org.javamodularity.moduleplugin" version '1.8.12'
    id 'java'
    id 'java-library'
    id 'idea'
    id "org.sonarqube" version '3.4.0.2513'
    id 'jacoco'
    id "application"
    id "com.github.spotbugs" version '5.0.9'
    id 'org.springframework.boot' version '2.7.2'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
}

spotbugs {
    reportLevel = 'high'
}

spotbugsMain {
    reports {
        html {
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

sonarqube {
    properties {
        property "sonar.projectKey", "ak-git_SimpleSpringApp"
        property "sonar.organization", "ak-git"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.branch.name", "master"
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml'
    }
}

jacoco {
    toolVersion = "0.8.8"
}

ext {
    javaVersion = JavaVersion.VERSION_18
    h2 = 'com.h2database:h2:2.1.214'
    postgres = 'org.postgresql:postgresql:42.4.1'
    faker = 'com.github.javafaker:javafaker:1.0.2'
}

wrapper {
    description 'Setup the Gradle wrapper'
    gradleVersion = "7.5.1"
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

allprojects {
    group = 'com.ak'
    version = '2022.08.20'
    apply plugin: 'idea'

    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.javamodularity.moduleplugin'
    apply plugin: 'jacoco'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url = 'https://plugins.gradle.org/m2/'
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-security'
        implementation(faker) {
            exclude group: 'org.yaml', module: 'snakeyaml'
        }
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        runtimeOnly h2
        runtimeOnly postgres
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        forkEvery = 5
        maxHeapSize = '1G'
    }
}

configurations {
    all {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

application {
    mainModule = 'com.ak.spring'
    mainClass = 'com.ak.spring.Application'
}