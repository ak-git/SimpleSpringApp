import com.github.spotbugs.snom.Confidence

plugins {
    id 'java'
    id 'idea'
    id "org.sonarqube" version '4.4.1.3373'
    id 'jacoco'
    id "com.github.spotbugs" version '6.0.2'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'

    id 'com.github.ben-manes.versions' version '0.50.0'
    id 'nebula.lint' version '19.0.1'
}

spotbugs {
    reportLevel = Confidence.valueOf('HIGH')
}

tasks.spotbugsMain {
    reports.create("html") {
        required = true
        setStylesheet("fancy-hist.xsl")
    }
}

sonar {
    properties {
        property "sonar.projectKey", "ak-git_SimpleSpringApp"
        property "sonar.organization", "ak-git"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.branch.name", "master"
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
    }
}

jacoco {
    toolVersion = "0.8.9"
}

ext {
    javaVersion = JavaVersion.VERSION_20
}

wrapper {
    description 'Setup the Gradle wrapper'
    gradleVersion = "8.5"
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

allprojects {
    group = 'com.ak'
    version = '2023.12.11'
    apply plugin: 'idea'
    idea {
        module {
            inheritOutputDirs = true
        }
    }
    sourceSets {
        main.output.resourcesDir = main.java.classesDirectory
    }

    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion

    repositories {
        mavenCentral()
        mavenLocal()
        gradlePluginPortal()
    }

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        testImplementation('org.springframework.boot:spring-boot-starter-test')
        runtimeOnly 'com.h2database:h2'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
        forkEvery = 5
        maxHeapSize = '1G'
    }
}

configurations {
    configureEach {
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
}